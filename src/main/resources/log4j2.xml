<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--status="WARN": 用于设置log4j2自身内部日志的信息输出级别，默认是OFF-->
<!--monitorInterval="1800": 间隔秒数,自动检测配置文件的变更和重新配置本身-->
<configuration status="WARN" monitorInterval="1800">

    <Properties>
        <!--自定义一些常量，之后使用${变量名}引用-->
        <Property name="logFilePath">./logs</Property>
        <Property name="logFileName">myLog</Property>
    </Properties>

    <!--Appenders: 定义输出内容,输出格式,输出方式,日志保存策略等,常用其下三种标签[console,File,RollingRandomAccessFile]-->
    <Appenders>
        <!--Console: 控制台输出的配置-->
        <console name="Console" target="SYSTEM_OUT" follow="true">
            <!--PatternLayout: 用于定义输出日志的格式-->
            <PatternLayout charset="UTF-8"
                           pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36}.%M() line:%L - %msg%xEx%n"/>
        </console>

        <!--File: 同步输出日志到本地文件-->
        <!--append="false": 根据其下日志策略,每次清空文件重新输入日志,可用于测试-->
        <File name="File" fileName="${logFilePath}/${logFileName}.log" append="false">
            <PatternLayout charset="UTF-8"
                           pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36}.%M() line:%L - %msg%xEx%n"/>
        </File>

        <RollingRandomAccessFile name="RollingRandomAccessFile" fileName="${logFilePath}/logs/info.log"
                                 filePattern="${logFilePath}/logs/$${date:yyyy-MM}/info-%d{yyyy-MM-dd HH}-%i.log"
                                 append="false">

            <!--  ACCEPT（接受）、DENY（拒绝）、NEUTRAL（中立) -->
            <!--  onMatch >= level  onMatch指的是日志级别大于等于level时的操作 -->
            <!--  onMismatch < level onMismatch表示日志级别小于level时的操作 -->
            <!--  通过添加两组 ThresholdFilter 可以达到一个级别的log 对应一个文件的目的-->
            <Filters>
                <!-- 这里设置只接收info级别的信息 -->
                <!--level="warn": 日志级别，onMatch="DENY": 级别在info之上则拒绝，onMismatch="NEUTRAL": 级别在info之下则中立，即不作任何操作-->
                <ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>

            <PatternLayout
                    pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] [%t] [%class{36}.%M() line:%L] - %msg%xEx%n"/>

            <!-- Policies: 日志滚动策略-->
            <Policies>
                <!--
                     TimeBasedTriggeringPolicy: 时间滚动策略，默认0点小时产生新的文件，interval="6": 自定义文件滚动时间间隔，
                     每隔6小时产生新文件, modulate="true": 产生文件是否以0点偏移时间，即6点、12点、18点、0点
                 -->
                <TimeBasedTriggeringPolicy interval="6" modulate="true"/>
                <!-- SizeBasedTriggeringPolicy :文件大小滚动策略-->
                <SizeBasedTriggeringPolicy size="60MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了10 -->
            <DefaultRolloverStrategy max="10"/>
        </RollingRandomAccessFile>

    </Appenders>

    <!--然后定义Logger，只有定义了Logger并引入的Appender，Appender才会生效-->
    <Loggers>
        <!-- 过滤掉spring和mybatis的一些无用的DEBUG信息 -->
        <!-- Logger节点用来单独指定日志的形式，name为包路径,比如要为org.springframework包下所有日志指定为error级别 -->
        <!-- 由于additivity属性缺省，则默认为true，其error级别以上(包括error级别)的日志信息都会在顶级Root的Appender中被输出 -->
        <Logger name="org.springframework" level="error"></Logger>
        <Logger name="org.mybatis" level="error"></Logger>

        <!-- Root节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出 -->
        <Root level="warn">
            <appender-ref ref="Console"/>
            <appender-ref ref="File"/>
            <appender-ref ref="RollingRandomAccessFile"/>
        </Root>

        <!-- AsyncLogger: 异步日志,LOG4J有三种日志模式,全异步日志,混合模式,同步日志,性能从高到底,线程越多效率越高,也可以避免日志卡死线程情况发生 -->
        <!-- additivity="false": additivity设置事件是否在父级logger 和 顶级Root的Appender中输出，为了避免重复输出，可以在Logger标签下设置additivity为"false" -->
        <!-- includeLocation="true": 显示文件行数，方法名等信息，对性能会有影响，能不用的情况下最好不用 -->
        <AsyncLogger name="com.log4j2" level="all" includeLocation="true" additivity="false">
            <appender-ref ref="RollingRandomAccessFile"/>
        </AsyncLogger>
    </Loggers>
</configuration>